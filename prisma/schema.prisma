generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                      @id @default(autoincrement())
  full_name          String                   @db.VarChar(100)
  email              String                   @unique @db.VarChar(100)
  password           String                   @db.VarChar(255)
  role               Role                     @default(user)
  created_at         DateTime                 @default(now())
  is_verified        Boolean                  @default(false)
  verification_token String?                  @db.VarChar(255)
  reactions          ChemicalReactionResult[]
  ExperimentStats    ExperimentStats[]
  sessions           Session[]
  threeDModels       ThreeDModel[]
  userActivities     UserActivity?
}

model Session {
  id            Int      @id @default(autoincrement())
  user_id       Int
  refresh_token String   @db.VarChar(255)
  created_at    DateTime @default(now())
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model ChemicalReactionResult {
  id             Int      @id @default(autoincrement())
  user_id        Int
  formula        String   @db.VarChar(255)
  reaction_type  String   @db.VarChar(50)
  color_gradient String   @db.VarChar(100)
  temperature    Int
  observations   String
  created_at     DateTime @default(now())
  user           User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model ExperimentStats {
  id         Int      @id @default(autoincrement())
  user_id    Int
  exType     String   @db.VarChar(50)
  count      Int      @default(0)
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, exType], name: "user_id_exType")
}

model UserActivity {
  id        Int      @id @default(autoincrement())
  user_id   Int      @unique
  totalTime Int      @default(0)
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [user_id], references: [id])
}

model ThreeDModel {
  id          Int      @id @default(autoincrement())
  uid         String   @unique @db.VarChar(255)
  name        String   @db.VarChar(255)
  thumbnail   String   @db.VarChar(500)
  category    String?  @db.VarChar(100)
  subcategory String?  @db.VarChar(100)
  embedUrl    String?  @db.VarChar(500)
  created_at  DateTime @default(now())
  uploaded_by Int?
  user        User?    @relation(fields: [uploaded_by], references: [id])
}

enum Role {
  user
  admin
}
