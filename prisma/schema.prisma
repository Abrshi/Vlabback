generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model chemicalreactionresult {
  id             Int      @id @default(autoincrement())
  formula        String   @db.VarChar(255)
  reaction_type  String   @db.VarChar(50)
  color_gradient String   @db.VarChar(100)
  temperature    Int
  observations   String   @db.Text
  created_at     DateTime @default(now())

  user_id        Int
  user           user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}


model experimentstats {
  id         Int      @id @default(autoincrement())
  user_id    Int
  exType     String   @db.VarChar(50)
  count      Int      @default(0)
  created_at DateTime @default(now())
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "ExperimentStats_user_id_fkey")

  @@unique([user_id, exType], map: "ExperimentStats_user_id_exType_key")
}

model session {
  id            Int      @id @default(autoincrement())
  user_id       Int
  refresh_token String   @db.VarChar(255)
  created_at    DateTime @default(now())
  user          user     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "Session_user_id_fk")

  @@index([user_id], map: "Session_user_id_fkey")
}

model threedmodel {
  id          Int      @id @default(autoincrement())
  uid         String   @unique(map: "ThreeDModel_uid_key") @db.VarChar(255)
  name        String   @db.VarChar(255)
  thumbnail   String   @db.VarChar(500)
  category    String?  @db.VarChar(100)
  subcategory String?  @db.VarChar(100)
  embedUrl    String?  @db.VarChar(500)
  created_at  DateTime @default(now())
  uploaded_by Int?
  user        user?    @relation(fields: [uploaded_by], references: [id], map: "ThreeDModel_uploaded_by_fk")

 likes        modelLike[]
  comments     modelComment[]

  @@index([uid])
  @@index([uploaded_by], map: "ThreeDModel_uploaded_by_fkey")
}

model user {
  id                     Int                      @id @default(autoincrement())
  full_name              String                   @db.VarChar(100)
  email                  String                   @unique(map: "User_email_key") @db.VarChar(100)
  password               String                   @db.VarChar(255)
  role                   user_role                @default(user)
  created_at             DateTime                 @default(now())
  is_verified            Boolean                  @default(false)
  verification_token     String?                  @db.VarChar(255)
  chemicalreactionresult chemicalreactionresult[]
  experimentstats        experimentstats[]
  session                session[]
  threedmodel            threedmodel[]
  useractivity           useractivity?
  
  modelLikes             modelLike[]
  modelComments          modelComment[]
}

model useractivity {
  id        Int      @id @default(autoincrement())
  user_id   Int      @unique(map: "UserActivity_user_id_key")
  totalTime Int      @default(0)
  updatedAt DateTime
  user      user     @relation(fields: [user_id], references: [id], map: "UserActivity_user_id_fkey")
}
model modelLike {
  id         Int         @id @default(autoincrement())
  userId     Int
  modelId    Int
  created_at DateTime    @default(now())

  user       user        @relation(fields: [userId], references: [id])
  model      threedmodel @relation(fields: [modelId], references: [id])

  @@unique([userId, modelId]) // one like per user per model
  @@index([modelId])
  @@index([userId])
}

model modelComment {
  id         Int         @id @default(autoincrement())
  userId     Int
  modelId    Int
  content    String       @db.VarChar(500)
  created_at DateTime     @default(now())

  user       user         @relation(fields: [userId], references: [id])
  model      threedmodel  @relation(fields: [modelId], references: [id])

  @@index([modelId, created_at])
  @@index([userId])
}
model labCategory {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(100)
  description String  @db.Text
  created_at DateTime @default(now())
}
enum user_role {
  user
  admin
}
